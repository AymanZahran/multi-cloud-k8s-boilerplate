{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "cdk8s-add-helm-repos": {
      "name": "cdk8s-add-helm-repos",
      "description": "cdk8s-add-helm-repos",
      "steps": [
        {
          "exec": "./scripts/add_helm_repos.sh"
        }
      ]
    },
    "cdk8s-cli-install": {
      "name": "cdk8s-cli-install",
      "description": "cdk8s-cli-install",
      "steps": [
        {
          "exec": "npm i -g cdk8s-cli --force"
        }
      ]
    },
    "cdk8s-diff": {
      "name": "cdk8s-diff",
      "description": "cdk8s-diff",
      "steps": [
        {
          "exec": "cdk8s diff"
        }
      ]
    },
    "cdk8s-get": {
      "name": "cdk8s-get",
      "description": "cdk8s-get",
      "steps": [
        {
          "exec": "rm -rf kubernetes/* && cp -rf dist/* kubernetes/"
        }
      ]
    },
    "cdk8s-import": {
      "name": "cdk8s-import",
      "description": "cdk8s-import",
      "steps": [
        {
          "exec": "cdk8s import"
        }
      ]
    },
    "cdk8s-synth": {
      "name": "cdk8s-synth",
      "description": "cdk8s-synth",
      "steps": [
        {
          "exec": "cdk8s synth"
        }
      ]
    },
    "cdk8s-upgrade": {
      "name": "cdk8s-upgrade",
      "description": "cdk8s-upgrade",
      "steps": [
        {
          "exec": "npm i cdk8s@latest cdk8s-cli@latest"
        }
      ]
    },
    "cdk8s-upgrade:next": {
      "name": "cdk8s-upgrade:next",
      "description": "cdk8s-upgrade:next",
      "steps": [
        {
          "exec": "npm i cdk8s@next cdk8s-cli@next"
        }
      ]
    },
    "cdktf-cli-install": {
      "name": "cdktf-cli-install",
      "description": "cdktf-cli-install",
      "steps": [
        {
          "exec": "npm i -g cdktf-cli --force"
        }
      ]
    },
    "cdktf-deploy": {
      "name": "cdktf-deploy",
      "description": "cdktf-deploy",
      "steps": [
        {
          "exec": "cdktf deploy"
        }
      ]
    },
    "cdktf-get": {
      "name": "cdktf-get",
      "description": "cdktf-get",
      "steps": [
        {
          "exec": "cdktf get"
        }
      ]
    },
    "cdktf-synth": {
      "name": "cdktf-synth",
      "description": "cdktf-synth",
      "steps": [
        {
          "exec": "cdktf synth"
        }
      ]
    },
    "cdktf-upgrade": {
      "name": "cdktf-upgrade",
      "description": "cdktf-upgrade",
      "steps": [
        {
          "exec": "npm i cdktf@latest cdktf-cli@latest"
        }
      ]
    },
    "cdktf-upgrade:next": {
      "name": "cdktf-upgrade:next",
      "description": "cdktf-upgrade:next",
      "steps": [
        {
          "exec": "npm i cdktf@next cdktf-cli@next"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "spawn": "cdktf-get"
        },
        {
          "spawn": "cdktf-synth"
        },
        {
          "spawn": "cdk8s-add-helm-repos"
        },
        {
          "spawn": "cdk8s-synth"
        },
        {
          "spawn": "cdk8s-get"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"master\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
